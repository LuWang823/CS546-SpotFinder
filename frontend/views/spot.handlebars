

<main id="spot">
    <div class="spot-container">
    <img src="{{image_src}}" class="spot-img" alt="Image of the spot">
    <div class="spot-info">
        <h2>Name: {{spotName}}</h2>
        <p>Tags: {{tagList}}</p>
        <p>Coordinates: {{spotCoordinates}}</p>
        <p>Description: {{spotDescription}}</p>
        <p>Average Rating: {{avgRating}}</p>
        <p>Number of Ratings: {{numRatings}}</p>
        <br>
        <button onclick="like()" class="like-button" id="likeSpot">Like This Spot (Save to Collection)</button>
    </div>
    </div>
    <br>

    <hr>
    <br>
    <button class="refresh-reviews-button" id="refresh-reviews">Refresh Reviews</button>
    <ul class="review-list"><!--should pass in an array of objects of all the reviews, not just the review IDs!!!-->
        <li id="review">
            <h4>Write your own review: </h4>
            <p id="error-message"></p>
            <form id="new-review">
                <label for="rating">Rating: </label>
                <input type="number" min="1" max="5" id="rating" name="rating">
                <label for="description">Review: </label>
                <input type="text" id="description" name="description">
                <input type="submit" class="submit-button" id="submit" name="submit">
            </form>
        </li>
    </ul>
</main>
<script src="/scripts/postReview.js"></script>
<script src="/scripts/likeSpot.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>//ajax for refreshing review list
    const errorMessage = document.getElementById('error-message');


    function getReviews() {
        const currentUrl = window.location.pathname;
        const spotId = currentUrl.split('/')[2]; // Extract spot ID from URL
        const apiUrl = `http://localhost:3000/api/v1/reviews/spots/${spotId}`;
        $.ajax({
            url: apiUrl,
            method: 'GET',
            success: (data) => {
                data = data.data;
                // Clear the current list
                const $ul = $('.review-list');  // Select the <ul> element using jQuery
                // Remove all <li> elements except the first one
                $ul.find('li').not(':first').remove();

                // Append the updated reviews
                data.forEach((review) => {
                    $('.review-list').append(`
                            <li>
                                <div>
                                    <h4>User: ${review.user.name}</h4>
                                    <p>Rating: ${review.ratings}</p>
                                </div>
                                <p>Review: ${review.description}</p>
                            </li>
                        `);
                });
            },
            error: (err) => {
                errorMessage.textContent = 'Error fetching reviews:' + err.message;
                errorMessage.style.display = 'block';
            },
        });
    }

    $(document).ready(() => {
        getReviews();
        // Refresh reviews when the button is clicked
        $('#refresh-reviews').click(() => {
            getReviews();
        });
    });
</script>
<script> //handle submitting a new review
    if (localStorage.getItem('accessToken') === null) {
        document.getElementById('review').style.display = 'none';
    } else {    //handle making a post request, check inputs, call function in postReview file
        document.getElementById('new-review').addEventListener('submit', async function (event) {
            event.preventDefault();//obliterate default behavior

            let description = document.getElementById('description').value;
            const rating = Number(document.getElementById('rating').value);
            const errorMessage = document.getElementById('error-message');

            if (!rating || typeof rating !== 'number' || rating < 1 || rating > 5) {
                errorMessage.textContent = 'invalid rating';
                errorMessage.style.display = 'block';
                return;
            }
            if (!description ||
                typeof description !== "string" ||
                description.trim().length < 1 || description.trim().length > 500) {
                errorMessage.textContent = 'invalid description';
                errorMessage.style.display = 'block';
                return;
            } else {
                description = description.trim();
            }

            const user = localStorage.getItem('accessToken')//use this access token in header
            const refresh = localStorage.getItem('refreshToken')//use this refresh token in header

            const currentUrl = window.location.pathname;
            // Split the path to get the ID
            const id = currentUrl.split('/')[2]; // spot id from current url
            try {
                //username and timestamp for review object gets populated on backend route, not front end responsibility, use access token to find user..
                await postReview(id, rating, description);
                errorMessage.textContent = 'successfully posted!';
                errorMessage.style.display = 'block';
                getReviews();
                document.getElementById('review').remove();
                

            } catch (e) {
                errorMessage.textContent = e.message;
                errorMessage.style.display = 'block';
            }
        });
    }
</script>